<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web渗透部分复现</title>
    <link href="/2023/12/16/web%E6%B8%97%E9%80%8F%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/12/16/web%E6%B8%97%E9%80%8F%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="web基础思路总结"><a href="#web基础思路总结" class="headerlink" title="web基础思路总结"></a>web基础思路总结</h2><p>一个菜鸟的简单渗透日记</p><h3 id="常见SQL思路"><a href="#常见SQL思路" class="headerlink" title="常见SQL思路"></a>常见SQL思路</h3><h4 id="1-堆叠注入"><a href="#1-堆叠注入" class="headerlink" title="1.堆叠注入"></a>1.堆叠注入</h4><p>  遇到题目就只给单独一个输入框然后进行查询的，直接考虑堆叠注入，一套不解释连招秒了╰(<em>°▽°</em>)╯</p><p>  堆叠注入</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">第一步:常规判断闭合&lt;只要给界面搞报错就是成功了&gt;</span><br><span class="hljs-section">第二步:构造语句查询库名和表名,以单引号闭合题目为例&lt;1&#x27;;show databases;#&gt;注意这里database后面要加s</span><br><span class="hljs-section">第三步:当我们找到表名之后要尝试将其打开,这是要使用函数handler</span><br><span class="hljs-section">补充handler用法:</span><br>HANDLER tbl_name OPEN; 打开一张表<br>HANDLER tbl_name READ FIRST/NEXT; 获取表中的第一行,FIRST(第一行)、NEXT(下一行)<br>当表名里有数字时要用反引号框起来<br></code></pre></td></tr></table></figure><p>可练习题目见</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">强网杯-随便注   <br></code></pre></td></tr></table></figure><h3 id="2-空格过滤方法"><a href="#2-空格过滤方法" class="headerlink" title="2.空格过滤方法"></a>2.空格过滤方法</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">$IFS              <br>$IFS$6                               ——后面的数字<span class="hljs-number">6</span>换成其他数字也行<br>$&#123;IFS&#125; <br>&lt;<br>&lt;&gt;<br>&#123;cat,flag.php&#125;                      ——这里把，替换成了空格键<br>%20                                     ——代表space键<br>%09                                     ——代表Tab键<br></code></pre></td></tr></table></figure><h3 id="3-Windows和Linux通用命令分隔符"><a href="#3-Windows和Linux通用命令分隔符" class="headerlink" title="3.Windows和Linux通用命令分隔符"></a>3.Windows和Linux通用命令分隔符<ping ping ping></h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">; : 命令<span class="hljs-number">1</span> ; 命令<span class="hljs-number">2</span>                  ——先执行命令<span class="hljs-number">1</span>再执行命令<span class="hljs-number">2</span><br><span class="hljs-meta">&amp; ：命令1 &amp; 命令2              ——先执行命令1再执行命令2</span><br><span class="hljs-string">| ： 命令1 &amp; 命令2               ——只执行命令2</span><br></code></pre></td></tr></table></figure><p>在知道命令分隔符的前提下,我们可以实现一种很神奇的绕过</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205174259364.png" alt="image-20231205174259364"></p><p>可以看见,我们使用分隔符|实现只执行第二个命令<ls> 即列出该目录下所有的文件</p><p>然后可见flag.php这个文件,答案就在眼前,但是当我们构造出查看该文件的命令时,却出现了这样一幕:</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205174542569.png" alt="image-20231205174542569"></p><p>很显然,我们的空格被过滤了＞﹏＜</p><p>用上刚学的空格过滤,我们发现还是打不开这个文件,于是退而求其次,看看另一个文件 里面是什么东西</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205174851323.png" alt="image-20231205174851323"></p><p>发现了源码,发现了一堆被过滤的东西ಥ_ಥ</p><p>这时候就有几种方式来进行绕过了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">1</span>.拼接法绕过<br>  通过源码我们知道过滤了flag这四个字母,这个方法主要是绕过对flag正则匹配的检测，有点悬，目前好像只能拼接末尾的g\ag\lag，我也不太清楚为啥<br>  将lag替换成x，绕过对flag的正匹检测，构建payload<br>  inurl?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;x=lag;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$6f</span><span class="hljs-variable">$x</span>.php&lt;ip中的<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>可以替换为任意数&gt;<br><span class="hljs-number">2</span>.内联执行法<br>可以看到代码没有过滤掉符号`  ， 所以可以利用内联执行的方式直接打开flag文件<br>先执行命令<span class="hljs-built_in">ls</span>，再把<span class="hljs-built_in">ls</span>得到的文件名全部用命令<span class="hljs-built_in">cat</span>打开，构建payload <br>inurl?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$6</span>`ls`<br></code></pre></td></tr></table></figure><h3 id="4-文件包含类"><a href="#4-文件包含类" class="headerlink" title="4.文件包含类"></a>4.文件包含类<Warm up></h3><p>常规看源码或者检查网络可以看到一些小提示，比如某个奇怪的文件(●’◡’●)，这时候就可以尝试我们的文件包含</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205211154100.png" alt="image-20231205211154100"></p><p>就像这样，访问该文件，如果发现有<strong>include</strong>函数，实锤</p><h4 id="warm-up-wp："><a href="#warm-up-wp：" class="headerlink" title="warm up wp："></a><strong>warm up</strong> wp：</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">可以看到<span class="hljs-keyword">include</span>函数没有任何过滤措施，那么我们可以利用本地文件包含漏洞来访问任意文件，以获取flag，但是想要执行<span class="hljs-keyword">include</span>函数，我们需要满足三个条件：<br><br><span class="hljs-number">1</span>. <span class="hljs-keyword">file</span>不为空<br><span class="hljs-number">2</span>. <span class="hljs-keyword">file</span>的值是字符串<br><span class="hljs-number">3</span>. <span class="hljs-keyword">file</span>通过emmm类的checkFile方法校验<br>步骤一：因为我们定义了<span class="hljs-keyword">file</span>的值且是<span class="hljs-keyword">string</span>类型，所以第一个<span class="hljs-keyword">if</span> 的<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span> 顺利绕过<br>步骤二：因为我们的<span class="hljs-keyword">file</span>的值既不是souce.php也不是hint.php，所以是无法通过该<span class="hljs-keyword">if</span>的，直接放弃这个<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>的机会，继续往下看。<br>步骤三：mb_substr会将<span class="hljs-keyword">file</span>的值通过一定的规则截取后，再次放入<span class="hljs-keyword">if</span>判断，那么我们可以在<span class="hljs-keyword">file</span>的值前面主动拼接一个souce.php?或者hint.php?，也就是<span class="hljs-keyword">file</span>=source.php?../ffffllllaaaagggg，通过mb_substr截取后的值是souce.php，此时checkFile返回<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>附上source.php源码截图</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205214739670.png" alt="image-20231205214739670"></p><h3 id="5-PHP伪协议"><a href="#5-PHP伪协议" class="headerlink" title="5.PHP伪协议"></a>5.PHP伪协议<Secret File></h3><h4 id="Secret-File-wp："><a href="#Secret-File-wp：" class="headerlink" title="Secret File wp："></a>Secret File wp：</h4><p>这道题开局有个小心机，有个按键被设置为和背景颜色一致，需要养成全选界面的好习惯，发现之后点击，会发现最后一个界面说的是没看清吗?,这时候就需要抓包(界面如下)来查看中间的一个文件是什么玩意,进入之后代码如下</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205215130127.png" alt="image-20231205215130127"></p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205215253604.png" alt="image-20231205215253604"></p><p>访问该flag.php文件</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20231205215405300.png" alt="image-20231205215405300"></p><p>查看源码也发现不了任何的东西,因为php代码被执行之后是不会再显示出来的ヾ(•ω•&#96;)o</p><p>其实,在我们发现<strong>flag.php</strong>这个神奇文件的时候,第一反应应该是这是一道<strong>PHP伪协议</strong>题</p><p>下面是一种我掌握的<strong>PHP伪协议</strong>用法(有新的继续补充)</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">在后面加上<br><br>?<span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=flag.php即可。<br><br>这是因为 php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode 是一种 PHP 伪协议，用于将文件转换为 base64 格式。通过在 <span class="hljs-variable">$_GET</span> 超全局变量中传递 <span class="hljs-built_in">file</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=flag.php，我们可以读取 flag.php 文件的内容并将其转换为 base64 格式。然后，我们可以将该内容解码并查看其中是否包含有用的信息。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/16/hello-world/"/>
    <url>/2023/12/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
